type: edu
custom_name: stage3
files:
- name: src/minesweeper/Main.kt
  visible: true
  text: "package minesweeper\n\nfun main() {\n    val mineField = mutableListOf(\n\
    \        mutableListOf(\".\", \".\", \".\", \"X\", \".\", \".\", \".\", \".\"\
    ),\n        mutableListOf(\".\", \"X\", \".\", \".\", \".\", \".\", \"X\", \"\
    .\"),\n        mutableListOf(\".\", \".\", \".\", \".\", \"X\", \".\", \".\",\
    \ \".\"),\n        mutableListOf(\"X\", \".\", \"X\", \".\", \".\", \".\", \"\
    .\", \".\"),\n        mutableListOf(\".\", \".\", \".\", \".\", \".\", \"X\",\
    \ \".\", \".\"),\n        mutableListOf(\".\", \"X\", \".\", \".\", \".\", \"\
    .\", \".\", \"X\"),\n        mutableListOf(\".\", \".\", \".\", \"X\", \".\",\
    \ \".\", \".\", \".\"),\n        mutableListOf(\".\", \".\", \".\", \".\", \"\
    .\", \".\", \".\", \".\")\n    )\n    \n    for (w in mineField) {\n        for\
    \ (h in w) {\n            print(h)\n        }\n        println(\"\")\n    }\n\
    }\n"
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/Minefield.kt
  visible: true
  text: |-
    package minesweeper

    object Minefield {
        val mineField = mutableListOf(
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
            mutableListOf(".", ".", ".", ".", ".", ".", ".", ".","."),
        )
        fun reload() {
            for (w in mineField) {
                for (h in w) {
                    print(h)
                }
                println("")
            }
        }

    }
  learner_created: true
- name: src/minesweeper/MineGenerator.kt
  visible: true
  text: |-
    package minesweeper

    import kotlin.random.Random
    import kotlin.random.Random.Default.nextBoolean

    class MineGenerator() {
        private val mine = Minefield
        var dy = 0
        var dx = 0
        var count = 0
        val rand = Random.Default
        fun generate(n: Int) {
    //        outer@for (w in mine.mineField) {
    //            inner@for (x in w) {
    //                if (dx >= 9) dx = 0
    //                var xx = rand.nextInt(0, 8)
    //                for (y in 0..9000000000000000000) {
    ////                    var xx = rand.nextInt(0, 8)
    //                    if (xx.toLong() == y.toLong()) {
    //                        mine.mineField[dy][dx] = "X"
    //                        ++count
    //                    } else {
    //                        break
    //                    }
    //                }
    //                dx++
    //                if (count == n) break@outer
    //            }
    //            dy++
    //        }

            while (count < n) {
                val dy = rand.nextInt(0, 8)
                val dx = rand.nextInt(0, 8)
                if (mine.mineField[dy][dx] != "X") {
                    mine.mineField[dy][dx] = "X"
                    ++count
                }

            }

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7688#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 11 Dec 2021 19:01:23 UTC
record: 3
